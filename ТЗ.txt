## 1. Назначение

Веб-приложение для работы с одной Google-таблицей (просмотр и редактирование), с аутентификацией через Auth0. Интерфейс таблицы реализован через Handsontable. Вся бизнес-логика и доступ к таблице — через backend (API). Развёртывание — на Vercel.

---

## 2. Краткая архитектура

* **Frontend:**

  * Next.js (или React) SPA
  * Auth0 для входа
  * Handsontable для отображения и редактирования таблицы
  * Взаимодействие с backend через API (fetch)

* **Backend (API):**

  * API-роуты Next.js (или serverless-функции Node.js)
  * node-google-spreadsheet для доступа к Google Sheets
  * Проверка Auth0-токена в каждом API-запросе

* **Google Sheets:**

  * Одна таблица, доступная только сервисному аккаунту

* **Хостинг:**

  * Vercel
  * Все ключи и секреты только в переменных окружения

---

## 3. Пошаговые действия по запуску и структуре

### Шаг 1. Создать Google Service Account и выдать ему доступ

1. В Google Cloud Console создать проект.
2. Включить Google Sheets API и Google Drive API.
3. Создать сервисный аккаунт, сгенерировать для него JSON-ключ.
4. Открыть нужную Google-таблицу, "Поделиться" с email сервисного аккаунта, дать права "Редактор".
5. Скопировать ID Google-таблицы (из URL).

---

### Шаг 2. Зарегистрировать приложение в Auth0

1. Зарегистрироваться или войти в Auth0.
2. Создать приложение типа SPA.
3. В настройках приложения добавить:

   * Allowed Callback URLs: адрес твоего сайта (например, `https://your-app.vercel.app`)
   * Allowed Logout URLs, CORS — тоже самое
4. Сохранить параметры: Domain, Client ID (Client Secret не нужен для SPA).

---

### Шаг 3. Создать Next.js проект

2. Установить зависимости:

   ```bash
   npm install @auth0/auth0-react google-spreadsheet @handsontable/react handsontable jsonwebtoken jwks-rsa
   ```

### Шаг 4. Настроить переменные окружения

1. В корне создать файл `.env.local`:

   для ключей GOOGLE и AUTH0

2. На Vercel продублировать эти переменные в Environment Variables.

---

### Шаг 5. Реализовать Backend API (например, /pages/api/sheet.js)

1. Принимать методы:

   * GET — получить все данные из таблицы
   * POST — добавить новую строку
   * PUT — обновить строку
   * DELETE — удалить строку
2. Проверять JWT-токен Auth0 в каждом запросе (из заголовка Authorization).
3. Работать с таблицей через node-google-spreadsheet.
4. Возвращать данные в формате массива объектов.

---

### Шаг 6. Реализовать Frontend (например, /pages/index.js)

1. Подключить Auth0 через `@auth0/auth0-react` (или аналог для Next.js).
2. После логина получать access token.
3. Делать запросы к API с этим токеном.
4. Получать и передавать данные Handsontable.
5. Реализовать обработчики событий Handsontable:

   * afterChange — отправлять PUT в API для обновления строки/ячейки
   * afterCreateRow — отправлять POST в API
   * afterRemoveRow — отправлять DELETE в API
6. Подключить стили:

   ```js
   import 'handsontable/dist/handsontable.full.min.css';
   ```
7. Сделать минимальный UI: кнопка "Войти", "Выйти", таблица.

---

### Шаг 7. Деплой на Vercel

1. Залить проект на GitHub.
2. Подключить к Vercel.
3. Прописать переменные окружения.
4. Запустить билд и убедиться, что сайт работает.

---

## 4. Описание функционала

* Пользователь входит через Auth0.
* После входа видит Handsontable с данными из Google Sheets.
* Можно редактировать значения, добавлять и удалять строки.
* Все изменения отправляются на backend и синхронизируются с Google Sheets.
* Без входа (авторизации) таблица недоступна.
* Если двое пользователей редактируют одну ячейку одновременно — сохраняется последнее изменение (никакой блокировки или проверки версий нет).

---

## 5. Критерии готовности

* После логина — таблица отображается и редактируется.
* Все изменения сохраняются в Google Sheets.
* Без логина — доступ невозможен.
* Приложение стабильно работает на Vercel.
* Весь код разворачивается только из этого ТЗ — ИИ генерирует весь необходимый код.

---

## 6. Важные замечания
* Все ключи, токены, пароли — только в переменных окружения, нигде не коммитить их в публичный репозиторий.